{
  "name": "fqueue",
  "version": "0.0.0",
  "description": "In-memory, error handling (retry) function queue, with the ability to throttle simultaneous executions.",
  "author": {
    "name": "Oliver Leics",
    "email": "oliver.leics@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/oleics/node-fqueue.git"
  },
  "contributors": [],
  "main": "./fqueue",
  "directories": {},
  "engines": {
    "node": ">= 0.4.x"
  },
  "dependencies": {},
  "scripts": {
    "test": "mocha -R spec"
  },
  "devDependencies": {
    "mocha": "1.0.x"
  },
  "readme": "Function Queue\r\n==============\r\n\r\n### In-memory, error handling (retry) function queue, with the ability to throttle simultaneous executions.\r\n\r\n[![Build Status](https://secure.travis-ci.org/oleics/node-fqueue.png)](http://travis-ci.org/oleics/node-fqueue)\r\n\r\nIt is the distillate of [node-filewalker](https://github.com/oleics/node-filewalker)\r\n\r\n### Installation\r\n\r\n```npm install fqueue```\r\n\r\n### Usage\r\n\r\nPlease have a look at the examples.\r\n\r\nClass FunctionQueue\r\n-------------------\r\n\r\nInherits from events.EventEmitter\r\n\r\n### Options\r\n\r\n```scope``` (default: this)\r\n\r\n```maxPending``` (default: -1)  \r\nMaximum asynchronous jobs.  \r\nUseful to throttle the number of simultaneous disk-operations.\r\n\r\n```maxAttempts``` (default: 3)  \r\nMaximum reattempts on error.  \r\nSet to 0 to disable reattempts.  \r\nSet to -1 for infinite reattempts.\r\n\r\n```attemptTimeout``` (default: 5000 ms)  \r\nMinimum time to wait before reattempt. In milliseconds.  \r\nUseful to let network-drives remount, etc.\r\n\r\n### Properties\r\n\r\n.scope  \r\n.maxPending  \r\n.maxAttempts  \r\n.attemptTimeout\r\n\r\n.running  \r\n.paused  \r\n.pending  \r\n.dequeued  \r\n.warnings  \r\n.errors  \r\n.attempts  \r\n.queue\r\n\r\n### Methods\r\n\r\nthis ```.start(func, args [, scope [, timeout]])```  \r\nStarts the function-queue.\r\n\r\nthis ```.enqueue(func, args [, scope [, timeout]])```  \r\nEnqueues a function for later execution.\r\n\r\nthis ```.done()```  \r\nTell the function-queue that the function has done execution.\r\n\r\nthis ```.error(err, func, args [, scope [, maxAttempts [, timeout]]])```  \r\nTell the function-queue about an error. This either initiates an  \r\nreattempt or emits the 'error' event.  \r\n*Notice:* You need to call ```.done()``` even if the function  \r\ncalled ```.error([..])```.\r\n\r\n#### General Methods\r\n\r\nboolean ```.isEmpty()```  \r\nReturns ```true``` if the queue is empty, otherwise ```false```\r\n\r\nthis ```.pause()```  \r\nPauses the execution of functions. Emits the 'pause' event after  \r\nall pending functions completed.\r\n\r\nthis ```.resume()```  \r\nResumes the previously paused execution of functions. Immediately  \r\nemits the 'resume' event.\r\n\r\n### Events\r\n\r\npause  \r\nresume  \r\ndone  \r\nerror err  \r\nretry func, args, err, r, scope\r\n\r\n## MIT License\r\n\r\nCopyright (c) 2012 Oliver Leics <oliver.leics@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/oleics/node-fqueue/issues"
  },
  "_id": "fqueue@0.0.0",
  "_from": "fqueue@0.0.x"
}
